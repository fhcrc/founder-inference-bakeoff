#!/usr/bin/env Rscript 

# attempts to determine if sequences in a fasta file are consistent with
# a single infection or multiple infections.
#
#  This script returns a 0 exit code for suspected single infections,
#  a 1 exit code for multiple infections.

if (!suppressMessages(require("pacman"))) install.packages("pacman")
pacman::p_load(optparse,tidyr, dplyr)

search.source <- function(file, path=c('.', 'R'), ...) 
{ 
    for (p in path) { 
        fp <- file.path(p, file) 
        if (file.exists(fp)) return(source(fp, ...)) 
   } 
   stop("file ", sQuote(file), " not found") 
} 

# parse dates in the sequence id and extract just those sequences from the earliest date.
select.early <- function(sequences) {
    date <- rownames(sequences) %>%
        strsplit('|', fixed=TRUE) %>%
        rapply(function(x) tail(x, 1)) %>%
        (function(l) sub("_\\d+$", "", l)) %>%
        as.Date()

    early <- date %>% unique() %>% sort() %>% head(1)
    sequences[date==early,]

}

# add a consensus sequence.
# Useful for formatting a fasta file in a form acceptable
# to the PFitter tool at http://www.hiv.lanl.gov/content/sequence/POISSON_FITTER/pfitter.html
#
# Typical usage:
# 	read.dna( fasta.file, format = "fasta" ) %>%
#     	    add.consensus( label=basename(file_path_sans_ext(fasta.file))) %>%
#     	    write.dna('output2.fa', format = "fasta", nbcol=-1, colsep = "",indent = 0,blocksep = 0)
#
add.consensus <- function ( in.fasta, label='Consensus' ) {
    .consensus.mat <- matrix( seqinr::consensus( as.character( in.fasta ) ), nrow = 1 );
    consensus <- as.DNAbin( .consensus.mat );
    rownames( consensus ) <- label
    
    rbind( consensus, in.fasta );
}

filter.gaps <- function(in.fasta, consensus='Consensus') {
    # Remove any columns with a consensus that is a gap, which means
    # that over half of seqs have gaps.  This needs to be removed
    # because it becomes not sensible to consider poisson rates of
    # insertions.  We do however consider rates of deletions, treating
    # them as point mutations (by including the indel counts in the
    # Hamming distance calculation).
    in.fasta <- in.fasta[,in.fasta[1,] != '-']
    
    return(in.fasta)
}

validate.sequences <- function(in.fasta) {
    stopifnot(inherits(in.fasta, "DNAbin"))
    if (nrow(in.fasta) <= 1) {
        stop("not enough sequences to run a poisson fitter on") 
    }
    return(in.fasta)
    
}

test.multiplicty <- function(file, opts) {
    tryCatch({
        r <- read.dna( file, format = "fasta" ) %>%
            select.early() %>%
            validate.sequences() %>%
            add.consensus() %>%
            filter.gaps() %>%
            prep.distances(include.gaps.in.Hamming=opt$include.gaps) %>%
            (function(d) pfitter(d$distances, opt$rate, d$seq.length))
                
        return(ifelse(r$goodness.pval < 0.05, 2, 1))
    }, error = function(e) {
        return(1)
    })
}

search.source('utils.r')
search.source('pfitter.r')

parser <- OptionParser(usage='keele [options] <fastafile>') %>%
    add_option(c("-r", "--rate"), type='double', default=2.16e-05, dest="rate",
               help="Mutation rate [default %default, based on Mansky and Temin 1995 (J Virol 69:5087-5094)]") %>%
    add_option(c("-g", "--include-gaps"),  action="store_true", default=FALSE,
               help="Include site with gaps in distace measure [default %default].  This effectively adds in a new distance matrix calculated with 'indel' model in dist.dna().",
               dest="include.gaps")

# a <- parse_args(parser, args = c('sample_aln.fa'), positional_arguments = TRUE)
# a <- parse_args(parser, args = c('caprisa002_pda_gp120_1m6m_aln.fasta'), positional_arguments = TRUE)
# a <- parse_args(parser, args = c('/tmp/tmp.IVXFilITKO/bakeoff_analysis_rv217_40265_1M6M_NFLG_removeHypermutatedSequences_removeRecombinedSequences.fa'), positional_arguments = TRUE)

a <- parse_args(parser, positional_arguments = TRUE)
file <- a$args
opt <- a$options


if (length(file) == 0) {
    print_help(parser)
    stop('Missing FASTA file argument.')
}

if (file.access(file) == -1)
    stop(sprintf("Cannot open FASTA input file '%s'", file))

m <- test.multiplicty(file, opt)
if ( m > 1 ) {
    # null hypothesis unlikely; inconsistent with single infection
    cat("cannot rule out multiple infection\n")
} else {
    # cannot rule out null hypothesis; consistent w/ single infection.
    cat("consistent with single infection.\n")
}

quit("no", status=0)


# Local Variables:
# mode: R
# End:              

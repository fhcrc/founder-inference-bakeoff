#!/usr/bin/env scons
# -*- coding: utf-8 -*-

'''
Scons file for driving Nestly to create a hierarchy of directories
and control files for exploration of various BEAST parameter settings.

'''
from __future__ import print_function


import os
import os.path
import glob
from nestly import Nest
from nestly.scons import SConsWrap
from SCons.Script import Environment
from SCons.Action import ActionFactory
from SCons.Subst import scons_subst


from utils import *

environ = os.environ.copy()

for k in ('SLURM_NTASKS', 'SLURM_NPROCS', 'SLURM_NNODES',
          'SLURM_NTASKS_PER_CORE', 'SLURM_CPUS_PER_TASK', 'SLURM_EXCLUSIVE'):
    environ[k] = '1'
environ['SLURM_TIMELIMIT'] = '0-6'

env = Environment(ENV=environ)
env.PrependENVPath('PATH', '../bin')

n = Nest(base_dict={})
w = SConsWrap(n, 'runs', alias_environment=env)

env['SANTAJAR']= os.path.abspath('../lib/santa.jar')

### Add to PATH
### We're going to simulate a call to 'source venv/bin/activate' by adding
### 'venv/bin' to the head of the path.
# if you don't have a virtual environment yet, you can build it with 'make venv'
env['venv'] = '../venv'
env.PrependENVPath('PATH', os.path.join(env['venv'], 'bin'))

samples= [ '../rv217_anon_1w_44.fasta',
           '../caprisa002_pda_gp120_1m6m_aln.fasta',
           '../bakeoff_analysis_rv217_40265_1M6M_NFLG_removeHypermutatedSequences_removeRecombinedSequences.fasta',
           '../bakeoff_analysis_rv217_40094_6M_NFLG_removeRecombinedSequences.fasta',
           '../bakeoff_analysis_rv217_40265_1M_NFLG.fasta' ]


n.add('sample', samples, label_func=lambda filename: os.path.splitext(os.path.basename(filename))[0])	

n.add('params',[True, False], label_func=lambda v: "params" if v else "treeheight")
n.add('nodata',[True, False], label_func=lambda v: "nodata" if v else "data")

n.add('replicates', range(5), label_func=lambda n: str(n))

# create the BEAST config file from sequences provided as training data for founder inference
@w.add_target_with_env(env)
def config_beast(env, outdir, c):
    target = os.path.join(outdir, 'beast_in.xml')
    if c['params']:
        cmd = ("mkbeast_rv217.py " + ("--nodata" if c['nodata'] else "") + " --template  ${SOURCES[0]} --params params.json default_rate=1.0  ${SOURCES[1]}  >${TARGET}")
    else:
        cmd = ("mkbeast_rv217.py " + ("--nodata" if c['nodata'] else "") + " --template  ${SOURCES[0]} --settoi default_rate=1.62E-2 backoff=120 ${SOURCES[1]}  >${TARGET}")

    return env.Command(target,
                       [ '../templates/beast_strict.template', c['sample'] ],
                       cmd)


@w.add_target_with_env(env)
def runbeast(env, outdir, c):
    target = [ os.path.join(outdir, 'beastout.log'),
               os.path.join(outdir, 'beastout.trees'),
               os.path.join(outdir, 'beastcmd.log') ]
    return env.Command(target,
                       c['config_beast'],
                       [ "srun --output=srun.log beast -working -overwrite -beagle " + os.path.abspath(str(c['config_beast'][0])) + " >${TARGETS[2]} 2>&1",
                         Wait(target) ])

@w.add_target_with_env(env)
def extract_params(env, outdir, c):
    target = [ os.path.join(outdir, 'params.json') ]
    return env.Command(target,
                       [ c['runbeast'][0] ],
                       "../bin/extract_params.py ${SOURCES[0]} >${TARGET}")



@w.add_target_with_env(env)
def extract_toi2(env, outdir, c):
    target = [ os.path.join(outdir, 'toi.csv') ]
    return env.Command(target,
                       [ c['runbeast'][0] ],
                       "../bin/posterior_toi.py ${SOURCES[0]} >${TARGET}")

